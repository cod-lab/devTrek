[{"name":"DOnt HaCk mE","title":"Public API's","originalDesc":"You can develop some great applications with the use of the following APIs.\n\n1. API Football\nIf you are a fan of a sport like a football, then it will be more fun and exciting to work on a project that deals with football data. API football provides tons of data including teams, fixtures, live scores, predictions, etc.\n\n2. Frankfurter\nFrankfurter provides current and historic foreign exchange rates. Rates are based on data published by the European Central Bank. It's totally free and does not require a key to fetch data.\n\n3. Poke API\nAll Pokémon data at one place with poke API. We all know about Pokémon, we used to watch the show in our childhood and many even today. This API shows data of individual Pokémon.","markdown":"# Now, Create frontend using online Api's","modifiedDesc":"You can develop some great applications with the use of the following APIs.<br><br>1. API Football<br>If you are a fan of a sport like a football, then it will be more fun and exciting to work on a project that deals with football data. API football provides tons of data including teams, fixtures, live scores, predictions, etc.<br><br>2. Frankfurter<br>Frankfurter provides current and historic foreign exchange rates. Rates are based on data published by the European Central Bank. It's totally free and does not require a key to fetch data.<br><br>3. Poke API<br>All Pokémon data at one place with poke API. We all know about Pokémon, we used to watch the show in our childhood and many even today. This API shows data of individual Pokémon.","updatedAt":"2021-08-20T20:54:07.126Z","slug":"public-apis","sanitizedHtml":"<h1 id=\"now-create-frontend-using-online-apis\">Now, Create frontend using online Api's</h1>\n","id":"3","createdAt":"2021-08-20T20:54:07.126Z","displayDate":"20/8/2021","likes":1},{"name":"ZoX","title":"CSS in JS","originalDesc":"Building web apps with React is not just about composing components together and making sure that the logic works correctly. That arguably is the most important part, where at least it's the biggest reason for using React. But building react apps is also about styling those apps.\n\nWe want to make sure that our web applications look good and styling is also an important part of building components.\n\nStyled-components is a CSS-in-JS styling library that uses tagged template literals in JavaScript and CSS rules to provide pre-styled components where the styling is scoped to that react component only.\n\nThe button as a JavaScript variable and the styles defined in backticks are plain old CSS styles. We can also see the nested style property with plain CSS styles.\n\nThis is how styled-components renders CSS in JavaScript.\n\nStyling React components\nThere are primarly two ways to style a React component.\n\n1. Inline Styling:\nconst style = {\ncolor: 'blue',\n};\n\nInline styling has one of the highest specificity value which will override any other CSS rule. This method is highly discouraged, as it is neither sustainable nor scalable.\n\n2. External Styling:\nThere’s this more traditional way of using CSS in external CSS files, which is then passed as a string to the className prop\n\nAs the component tree grows, CSS files begin to get bulky, clumsy, and complex. One great alternative solution to this is the usage of SASS. Although SASS helps, you’ll eventually deal with the same issue due to the sheer number of SCSS files a project can have.\n\nFinally, CSS-in-JS is a technique where JavaScript is used to style components. When this JavaScript is parsed by the browser, CSS is generated as a style element and attached inside <head></head> of the HTML document.","markdown":"# Efficiently write CSS in JS","modifiedDesc":"Building web apps with React is not just about composing components together and making sure that the logic works correctly. That arguably is the most important part, where at least it's the biggest reason for using React. But building react apps is also about styling those apps.<br><br>We want to make sure that our web applications look good and styling is also an important part of building components.<br><br>Styled-components is a CSS-in-JS styling library that uses tagged template literals in JavaScript and CSS rules to provide pre-styled components where the styling is scoped to that react component only.<br><br>The button as a JavaScript variable and the styles defined in backticks are plain old CSS styles. We can also see the nested style property with plain CSS styles.<br><br>This is how styled-components renders CSS in JavaScript.<br><br>Styling React components<br>There are primarly two ways to style a React component.<br><br>1. Inline Styling:<br>const style = {<br>color: 'blue',<br>};<br><br>Inline styling has one of the highest specificity value which will override any other CSS rule. This method is highly discouraged, as it is neither sustainable nor scalable.<br><br>2. External Styling:<br>There’s this more traditional way of using CSS in external CSS files, which is then passed as a string to the className prop<br><br>As the component tree grows, CSS files begin to get bulky, clumsy, and complex. One great alternative solution to this is the usage of SASS. Although SASS helps, you’ll eventually deal with the same issue due to the sheer number of SCSS files a project can have.<br><br>Finally, CSS-in-JS is a technique where JavaScript is used to style components. When this JavaScript is parsed by the browser, CSS is generated as a style element and attached inside <head></head> of the HTML document.","updatedAt":"2021-08-20T20:53:53.191Z","slug":"css-in-js","sanitizedHtml":"<h1 id=\"efficiently-write-css-in-js\">Efficiently write CSS in JS</h1>\n","id":"4","createdAt":"2021-08-20T20:53:53.191Z","displayDate":"20/8/2021","likes":3},{"name":"Bot","title":"Machine Learning","originalDesc":"Pre-requisites:\n\nFirst things first, what are the pre-requisites of learning Machine Learning? Just knowing the programming languages are not enough; you must know the mathematics behind each algorithm too. The important topics one must familiarize themselves with are:\n\n1. For Linear Algebra\n2. For Statistics\n3. For Calculus\n\nCoding fundamentals:\nMany languages are used for writing Machine Learning programs, like Python, R, Java and so on. However, python is the most recommended because of its several libraries and frameworks that have simplified the task of writing complex code. Another reason I would recommend Python is because there are far more Machine Learning tutorials written in python than there are in R. Thus, it is easier for a python programmer to get help from the data science community than an R programmer. However, R is also known for its various data visualization libraries. Thus, there is no harm in learning both languages and utilizing their best features. You can always learn one and move to the next. For a beginner, I would recommend python.","markdown":"# RoadMap for Machine Learning","modifiedDesc":"Pre-requisites:<br><br>First things first, what are the pre-requisites of learning Machine Learning? Just knowing the programming languages are not enough; you must know the mathematics behind each algorithm too. The important topics one must familiarize themselves with are:<br><br>1. For Linear Algebra<br>2. For Statistics<br>3. For Calculus<br><br>Coding fundamentals:<br>Many languages are used for writing Machine Learning programs, like Python, R, Java and so on. However, python is the most recommended because of its several libraries and frameworks that have simplified the task of writing complex code. Another reason I would recommend Python is because there are far more Machine Learning tutorials written in python than there are in R. Thus, it is easier for a python programmer to get help from the data science community than an R programmer. However, R is also known for its various data visualization libraries. Thus, there is no harm in learning both languages and utilizing their best features. You can always learn one and move to the next. For a beginner, I would recommend python.","updatedAt":"2021-08-21T20:53:44.978Z","slug":"machine-learning","sanitizedHtml":"<h1 id=\"roadmap-for-machine-learning\">RoadMap for Machine Learning</h1>\n","id":"5","createdAt":"2021-08-21T20:53:44.978Z","displayDate":"21/8/2021","likes":1},{"name":"Sandeep","title":"Optimizing React Apps","originalDesc":"You've heard of minifying. You've heard of lazy-loading. You've heard of tree shaking. You've done it all. Or did you? Here are some optimizations you may have never heard of before. Until now!\n\n1. Enable \"loose\" transformations in @babel/preset-env:\nEnabling \"loose\" transformations may make your application considerably smaller. I shaved off roughly 230.9 KB, or 16.2% from my bundle!\n\nThis, however, comes at a price: your application may break, both when enabling, and disabling these transformations.\n\nIn my case, the only fix I needed to do was related to iterating over HTMLFormControlsCollection (form.elements). I was no longer able to do e.g. [...form.elements], I had to swap it out for Array.from(form.elements).\n\nStill tempted by the large savings? Give it a go by enabling loose flag in Babel config:\n\nbabel.config.json-\n\"presets\": [\n-\"@babel/preset-env\"\n+[\"@babel/preset-env\", {\n+\"loose\": true\n+}]\n]\n\n2. Remove prop-types from your production bundle:\nPropTypes are incredibly helpful during development, but they are of no use for your users. You can use babel-plugin-transform-react-remove-prop-types to remove PropTypes from your bundle.\n\nTo install, run:\nnpm install --save-dev babel-plugin-transform-react-remove-prop-types\nor\nyarn add -D babel-plugin-transform-react-remove-prop-types\nand add it to your Babel config like so:\n\nbabel.config.json-\n\"env\": {\n\"production\": {\n\"plugins\": [\n+\"transform-react-remove-prop-types\"\n]\n}\n}\n\nSavings will vary depending on the size of your app. In my case, I shaved off 16.5 KB or about 1.2% from my bundle.\n\n3. Consider unsafe-wrap mode:\nunsafe-wrap mode is, as the name states, a bit unsafe for the reasons well explained in plugin's docs.\n\nHowever, in my case, PropTypes were not accessed from anywhere and the application worked flawlessly.\n\nTo enable this mode, you need to change your Babel config like so:\n\nbabel.config.json-\n\"env\": {\n\"production\": {\n\"plugins\": [\n-\"transform-react-remove-prop-types\"\n+[\"transform-react-remove-prop-types\", {\n+\"mode\": \"unsafe-wrap\"\n+}]\n]\n}\n}\n\nThis way, I shaved off a total of 35.9 KB or about 2.5% from my bundle.\n\n4. Enable new JSX transform:\nEnabling new JSX transform will change the way Babel React preset transpiles JSX to pure JavaScript.\n\nI explained the benefits of enabling it in my other article: How to enable new JSX transform in React 17?.\n\nI highly recommend you to have a read. If that's TL;DR though, all you need to do for quick results is make sure that @babel/core and @babel/preset-env in your project are both on version 7.9.0 or newer, and change your Babel config like so:\n\nbabel.config.json\n\"presets\": [\n-\"@babel/preset-react\"\n+[\"@babel/preset-react\", {\n+\"runtime\": \"automatic\"\n+}]\n]\n\nAnd poof! Roughly 10.5 KB, or 0.7% of my bundle was gone.","markdown":"# Optimizing React apps: Hardcore edition","modifiedDesc":"You've heard of minifying. You've heard of lazy-loading. You've heard of tree shaking. You've done it all. Or did you? Here are some optimizations you may have never heard of before. Until now!<br><br>1. Enable \"loose\" transformations in @babel/preset-env:<br>Enabling \"loose\" transformations may make your application considerably smaller. I shaved off roughly 230.9 KB, or 16.2% from my bundle!<br><br>This, however, comes at a price: your application may break, both when enabling, and disabling these transformations.<br><br>In my case, the only fix I needed to do was related to iterating over HTMLFormControlsCollection (form.elements). I was no longer able to do e.g. [...form.elements], I had to swap it out for Array.from(form.elements).<br><br>Still tempted by the large savings? Give it a go by enabling loose flag in Babel config:<br><br>babel.config.json-<br>\"presets\": [<br>-\"@babel/preset-env\"<br>+[\"@babel/preset-env\", {<br>+\"loose\": true<br>+}]<br>]<br><br>2. Remove prop-types from your production bundle:<br>PropTypes are incredibly helpful during development, but they are of no use for your users. You can use babel-plugin-transform-react-remove-prop-types to remove PropTypes from your bundle.<br><br>To install, run:<br>npm install --save-dev babel-plugin-transform-react-remove-prop-types<br>or<br>yarn add -D babel-plugin-transform-react-remove-prop-types<br>and add it to your Babel config like so:<br><br>babel.config.json-<br>\"env\": {<br>\"production\": {<br>\"plugins\": [<br>+\"transform-react-remove-prop-types\"<br>]<br>}<br>}<br><br>Savings will vary depending on the size of your app. In my case, I shaved off 16.5 KB or about 1.2% from my bundle.<br><br>3. Consider unsafe-wrap mode:<br>unsafe-wrap mode is, as the name states, a bit unsafe for the reasons well explained in plugin's docs.<br><br>However, in my case, PropTypes were not accessed from anywhere and the application worked flawlessly.<br><br>To enable this mode, you need to change your Babel config like so:<br><br>babel.config.json-<br>\"env\": {<br>\"production\": {<br>\"plugins\": [<br>-\"transform-react-remove-prop-types\"<br>+[\"transform-react-remove-prop-types\", {<br>+\"mode\": \"unsafe-wrap\"<br>+}]<br>]<br>}<br>}<br><br>This way, I shaved off a total of 35.9 KB or about 2.5% from my bundle.<br><br>4. Enable new JSX transform:<br>Enabling new JSX transform will change the way Babel React preset transpiles JSX to pure JavaScript.<br><br>I explained the benefits of enabling it in my other article: How to enable new JSX transform in React 17?.<br><br>I highly recommend you to have a read. If that's TL;DR though, all you need to do for quick results is make sure that @babel/core and @babel/preset-env in your project are both on version 7.9.0 or newer, and change your Babel config like so:<br><br>babel.config.json<br>\"presets\": [<br>-\"@babel/preset-react\"<br>+[\"@babel/preset-react\", {<br>+\"runtime\": \"automatic\"<br>+}]<br>]<br><br>And poof! Roughly 10.5 KB, or 0.7% of my bundle was gone.","updatedAt":"2021-08-22T20:53:08.789Z","slug":"optimizing-react-apps","sanitizedHtml":"<h1 id=\"optimizing-react-apps-hardcore-edition\">Optimizing React apps: Hardcore edition</h1>\n","id":"6","createdAt":"2021-08-22T20:53:08.789Z","displayDate":"22/8/2021","likes":1},{"name":"Tushar","title":"PHP Laravel","originalDesc":"Kubernetes is an excellent open-source container orchestration platform that brings automatic scaling, automatic recovery, observability, and many more features. Since it differs from traditional operations, it has changed the development and deployment workflows as well. Debugging an application on Kubernetes can be a challenge.\n\nDevSpace is a tool that helps you develop, deploy, troubleshoot simple or complex applications. We will use a Laravel project to demonstrate its features. \n\nLaravel is a popular framework used by the PHP community with great features like extensibility, inheritance, and reusability with high customization options.\n\nArchitecture:\nWe will look at ways to deploy a Laravel based application into a Kubernetes cluster for development and production environments. We will develop our application while the application is running in Kubernetes as if we are developing locally. And we will be able to troubleshoot our application in real-time with ease.\n\nThe desired setup uses four containers, in three pods:\n1. PHP-FPM container, which processes all the PHP assets.\n2. Nginx container, which serves static files and acts as a reverse proxy for the PHP assets.\n3. MySQL container, as the database.\n4. Redis container, as session and cache.","markdown":"# PHP Laravel Development with Kubernetes using DevSpace","modifiedDesc":"Kubernetes is an excellent open-source container orchestration platform that brings automatic scaling, automatic recovery, observability, and many more features. Since it differs from traditional operations, it has changed the development and deployment workflows as well. Debugging an application on Kubernetes can be a challenge.<br><br>DevSpace is a tool that helps you develop, deploy, troubleshoot simple or complex applications. We will use a Laravel project to demonstrate its features. <br><br>Laravel is a popular framework used by the PHP community with great features like extensibility, inheritance, and reusability with high customization options.<br><br>Architecture:<br>We will look at ways to deploy a Laravel based application into a Kubernetes cluster for development and production environments. We will develop our application while the application is running in Kubernetes as if we are developing locally. And we will be able to troubleshoot our application in real-time with ease.<br><br>The desired setup uses four containers, in three pods:<br>1. PHP-FPM container, which processes all the PHP assets.<br>2. Nginx container, which serves static files and acts as a reverse proxy for the PHP assets.<br>3. MySQL container, as the database.<br>4. Redis container, as session and cache.","updatedAt":"2021-08-22T20:52:19.267Z","slug":"php-laravel","sanitizedHtml":"<h1 id=\"php-laravel-development-with-kubernetes-using-devspace\">PHP Laravel Development with Kubernetes using DevSpace</h1>\n","id":"7","createdAt":"2021-08-22T20:52:19.267Z","displayDate":"22/8/2021","likes":1}]